export type RequestSetTxnAuthorAgreementAcceptanceOptions = {
    acceptance: {
        mechanism: string;
        taaDigest: string;
        time: number;
    };
};
export type RequestSetMultiSignatureOptions = {
    identifier: string;
    signature: Uint8Array;
};
export type RequestSetSignatureOptions = {
    signature: Uint8Array;
};
export type RequestSetEndorserOptions = {
    endorser: string;
};
export type RequestResponseType<Request> = Request extends IndyVdrRequest<infer ResponseType> ? ResponseType : never;
export declare class IndyVdrRequest<ResponseType extends Record<string, unknown> = Record<string, unknown>> {
    private _handle;
    protected __responseType__?: ResponseType;
    constructor(options: {
        handle: number;
    });
    get handle(): number;
    get body(): string;
    get signatureInput(): string;
    setEndorser(options: RequestSetEndorserOptions): void;
    setMultiSignature(options: RequestSetMultiSignatureOptions): void;
    setSignature(options: RequestSetSignatureOptions): void;
    setTransactionAuthorAgreementAcceptance(options: RequestSetTxnAuthorAgreementAcceptanceOptions): void;
    free(): void;
}
