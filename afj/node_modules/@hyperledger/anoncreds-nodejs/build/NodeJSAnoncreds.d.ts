import type { NativeCredentialEntry, NativeCredentialProve, Anoncreds, NativeCredentialRevocationConfig, NativeNonRevokedIntervalOverride } from '@hyperledger/anoncreds-shared';
import { ObjectHandle } from '@hyperledger/anoncreds-shared';
export declare class NodeJSAnoncreds implements Anoncreds {
    private handleError;
    get nativeAnoncreds(): {
        anoncreds_buffer_free: (args_0: Buffer) => unknown;
        anoncreds_create_credential: (args_0: number, args_1: number, args_2: number, args_3: number, args_4: Buffer, args_5: Buffer, args_6: Buffer, args_7: number, args_8: Buffer) => unknown;
        anoncreds_create_credential_definition: (args_0: string, args_1: number, args_2: string, args_3: string, args_4: string, args_5: number, args_6: Buffer, args_7: Buffer, args_8: Buffer) => unknown;
        anoncreds_create_credential_offer: (args_0: string, args_1: string, args_2: number, args_3: Buffer) => unknown;
        anoncreds_create_credential_request: (args_0: string, args_1: string, args_2: number, args_3: string, args_4: string, args_5: number, args_6: Buffer, args_7: Buffer) => unknown;
        anoncreds_create_link_secret: (args_0: Buffer) => unknown;
        anoncreds_create_or_update_revocation_state: (args_0: number, args_1: number, args_2: number, args_3: string, args_4: number, args_5: number, args_6: Buffer) => unknown;
        anoncreds_create_presentation: (args_0: number, args_1: Buffer, args_2: Buffer, args_3: Buffer, args_4: Buffer, args_5: string, args_6: Buffer, args_7: Buffer, args_8: Buffer, args_9: Buffer, args_10: Buffer) => unknown;
        anoncreds_create_revocation_registry_def: (args_0: number, args_1: string, args_2: string, args_3: string, args_4: string, args_5: number, args_6: string, args_7: Buffer, args_8: Buffer) => unknown;
        anoncreds_create_schema: (args_0: string, args_1: string, args_2: string, args_3: Buffer, args_4: Buffer) => unknown;
        anoncreds_credential_get_attribute: (args_0: number, args_1: string, args_2: Buffer) => unknown;
        anoncreds_encode_credential_attributes: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_generate_nonce: (args_0: Buffer) => unknown;
        anoncreds_get_current_error: (args_0: Buffer) => unknown;
        anoncreds_object_free: (args_0: number) => unknown;
        anoncreds_string_free: (args_0: Buffer) => unknown;
        anoncreds_object_get_json: (args_0: number, args_1: Buffer) => unknown;
        anoncreds_object_get_type_name: (args_0: number, args_1: Buffer) => unknown;
        anoncreds_presentation_request_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_process_credential: (args_0: number, args_1: number, args_2: string, args_3: number, args_4: number, args_5: Buffer) => unknown;
        anoncreds_revocation_registry_definition_get_attribute: (args_0: number, args_1: string, args_2: Buffer) => unknown;
        anoncreds_set_default_logger: () => unknown;
        anoncreds_verify_presentation: (args_0: number, args_1: number, args_2: Buffer, args_3: Buffer, args_4: Buffer, args_5: Buffer, args_6: Buffer, args_7: Buffer, args_8: Buffer, args_9: Buffer, args_10: Buffer) => unknown;
        anoncreds_create_revocation_status_list: (args_0: number, args_1: string, args_2: number, args_3: number, args_4: string, args_5: number, args_6: number, args_7: Buffer) => unknown;
        anoncreds_update_revocation_status_list_timestamp_only: (args_0: number, args_1: number, args_2: Buffer) => unknown;
        anoncreds_update_revocation_status_list: (args_0: number, args_1: number, args_2: number, args_3: number, args_4: Buffer, args_5: Buffer, args_6: number, args_7: Buffer) => unknown;
        anoncreds_version: () => string;
        anoncreds_credential_request_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_credential_request_metadata_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_presentation_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_credential_offer_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_revocation_registry_definition_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_revocation_registry_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_revocation_status_list_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_revocation_state_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_credential_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_credential_definition_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_credential_definition_private_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_revocation_registry_definition_private_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_key_correctness_proof_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
        anoncreds_schema_from_json: (args_0: Buffer, args_1: Buffer) => unknown;
    };
    generateNonce(): string;
    createSchema(options: {
        name: string;
        version: string;
        issuerId: string;
        attributeNames: string[];
    }): ObjectHandle;
    revocationRegistryDefinitionGetAttribute(options: {
        objectHandle: ObjectHandle;
        name: string;
    }): string;
    credentialGetAttribute(options: {
        objectHandle: ObjectHandle;
        name: string;
    }): string;
    createCredentialDefinition(options: {
        schemaId: string;
        schema: ObjectHandle;
        issuerId: string;
        tag: string;
        signatureType: string;
        supportRevocation: boolean;
    }): {
        credentialDefinition: ObjectHandle;
        credentialDefinitionPrivate: ObjectHandle;
        keyCorrectnessProof: ObjectHandle;
    };
    createCredential(options: {
        credentialDefinition: ObjectHandle;
        credentialDefinitionPrivate: ObjectHandle;
        credentialOffer: ObjectHandle;
        credentialRequest: ObjectHandle;
        attributeRawValues: Record<string, string>;
        attributeEncodedValues?: Record<string, string>;
        revocationConfiguration?: NativeCredentialRevocationConfig;
    }): ObjectHandle;
    encodeCredentialAttributes(options: {
        attributeRawValues: Array<string>;
    }): Array<string>;
    processCredential(options: {
        credential: ObjectHandle;
        credentialRequestMetadata: ObjectHandle;
        linkSecret: string;
        credentialDefinition: ObjectHandle;
        revocationRegistryDefinition?: ObjectHandle | undefined;
    }): ObjectHandle;
    createCredentialOffer(options: {
        schemaId: string;
        credentialDefinitionId: string;
        keyCorrectnessProof: ObjectHandle;
    }): ObjectHandle;
    createCredentialRequest(options: {
        entropy?: string;
        proverDid?: string;
        credentialDefinition: ObjectHandle;
        linkSecret: string;
        linkSecretId: string;
        credentialOffer: ObjectHandle;
    }): {
        credentialRequest: ObjectHandle;
        credentialRequestMetadata: ObjectHandle;
    };
    createLinkSecret(): string;
    createPresentation(options: {
        presentationRequest: ObjectHandle;
        credentials: NativeCredentialEntry[];
        credentialsProve: NativeCredentialProve[];
        selfAttest: Record<string, string>;
        linkSecret: string;
        schemas: Record<string, ObjectHandle>;
        credentialDefinitions: Record<string, ObjectHandle>;
    }): ObjectHandle;
    verifyPresentation(options: {
        presentation: ObjectHandle;
        presentationRequest: ObjectHandle;
        schemas: ObjectHandle[];
        schemaIds: string[];
        credentialDefinitions: ObjectHandle[];
        credentialDefinitionIds: string[];
        revocationRegistryDefinitions?: ObjectHandle[];
        revocationRegistryDefinitionIds?: string[];
        revocationStatusLists?: ObjectHandle[];
        nonRevokedIntervalOverrides?: NativeNonRevokedIntervalOverride[];
    }): boolean;
    createRevocationStatusList(options: {
        credentialDefinition: ObjectHandle;
        revocationRegistryDefinitionId: string;
        revocationRegistryDefinition: ObjectHandle;
        revocationRegistryDefinitionPrivate: ObjectHandle;
        issuerId: string;
        issuanceByDefault: boolean;
        timestamp?: number;
    }): ObjectHandle;
    updateRevocationStatusListTimestampOnly(options: {
        timestamp: number;
        currentRevocationStatusList: ObjectHandle;
    }): ObjectHandle;
    updateRevocationStatusList(options: {
        credentialDefinition: ObjectHandle;
        revocationRegistryDefinition: ObjectHandle;
        revocationRegistryDefinitionPrivate: ObjectHandle;
        currentRevocationStatusList: ObjectHandle;
        issued?: number[];
        revoked?: number[];
        timestamp?: number;
    }): ObjectHandle;
    createRevocationRegistryDefinition(options: {
        credentialDefinition: ObjectHandle;
        credentialDefinitionId: string;
        issuerId: string;
        tag: string;
        revocationRegistryType: string;
        maximumCredentialNumber: number;
        tailsDirectoryPath?: string;
    }): {
        revocationRegistryDefinition: ObjectHandle;
        revocationRegistryDefinitionPrivate: ObjectHandle;
    };
    createOrUpdateRevocationState(options: {
        revocationRegistryDefinition: ObjectHandle;
        revocationStatusList: ObjectHandle;
        revocationRegistryIndex: number;
        tailsPath: string;
        oldRevocationState?: ObjectHandle;
        oldRevocationStatusList?: ObjectHandle;
    }): ObjectHandle;
    version(): string;
    setDefaultLogger(): void;
    getCurrentError(): string;
    private objectFromJson;
    presentationRequestFromJson(options: {
        json: string;
    }): ObjectHandle;
    credentialRequestFromJson(options: {
        json: string;
    }): ObjectHandle;
    credentialRequestMetadataFromJson(options: {
        json: string;
    }): ObjectHandle;
    revocationRegistryDefinitionFromJson(options: {
        json: string;
    }): ObjectHandle;
    revocationRegistryFromJson(options: {
        json: string;
    }): ObjectHandle;
    revocationStatusListFromJson(options: {
        json: string;
    }): ObjectHandle;
    revocationStateFromJson(options: {
        json: string;
    }): ObjectHandle;
    presentationFromJson(options: {
        json: string;
    }): ObjectHandle;
    credentialOfferFromJson(options: {
        json: string;
    }): ObjectHandle;
    schemaFromJson(options: {
        json: string;
    }): ObjectHandle;
    credentialFromJson(options: {
        json: string;
    }): ObjectHandle;
    revocationRegistryDefinitionPrivateFromJson(options: {
        json: string;
    }): ObjectHandle;
    credentialDefinitionFromJson(options: {
        json: string;
    }): ObjectHandle;
    credentialDefinitionPrivateFromJson(options: {
        json: string;
    }): ObjectHandle;
    keyCorrectnessProofFromJson(options: {
        json: string;
    }): ObjectHandle;
    getJson(options: {
        objectHandle: ObjectHandle;
    }): string;
    getTypeName(options: {
        objectHandle: ObjectHandle;
    }): string;
    objectFree(options: {
        objectHandle: ObjectHandle;
    }): void;
}
