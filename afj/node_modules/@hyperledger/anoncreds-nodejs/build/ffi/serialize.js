"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeArguments = void 0;
const ref_napi_1 = require("@2060.io/ref-napi");
const anoncreds_shared_1 = require("@hyperledger/anoncreds-shared");
const structures_1 = require("./structures");
// TODO: this method needs to be reworked.
// It is very messy
// cannot handle complex data structures well
const serialize = (arg) => {
    switch (typeof arg) {
        case 'undefined':
            return ref_napi_1.NULL;
        case 'boolean':
            return Number(arg);
        case 'string':
            return arg;
        case 'number':
            return arg;
        case 'function':
            return arg;
        case 'object':
            if (arg instanceof anoncreds_shared_1.ObjectHandle) {
                return arg.handle;
            }
            else if (Array.isArray(arg)) {
                if (arg.every((it) => typeof it === 'string')) {
                    return (0, structures_1.StringListStruct)({ count: arg.length, data: arg });
                }
                else if (arg.every((it) => it instanceof anoncreds_shared_1.ObjectHandle)) {
                    return (0, structures_1.ObjectHandleListStruct)({
                        count: arg.length,
                        data: arg.map((i) => i.handle),
                    });
                }
                else if (arg.every((it) => typeof it === 'number')) {
                    return (0, structures_1.I32ListStruct)({
                        count: arg.length,
                        data: (0, structures_1.Int32Array)(arg),
                    });
                }
            }
            // TODO: add more serialization here for classes and uint8arrays
            return JSON.stringify(arg);
        default:
            throw new Error('could not serialize value');
    }
};
const serializeArguments = (args) => {
    const retVal = {};
    Object.entries(args).forEach(([key, val]) => (retVal[key] = serialize(val)));
    return retVal;
};
exports.serializeArguments = serializeArguments;
//# sourceMappingURL=serialize.js.map