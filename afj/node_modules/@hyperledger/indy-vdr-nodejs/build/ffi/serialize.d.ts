import type { ByteBuffer } from './structures';
export type Callback = (err: number) => void;
export type CallbackWithResponse = (err: number, response: string) => void;
type Argument = Record<string, unknown> | Array<unknown> | Date | Uint8Array | SerializedArgument;
type SerializedArgument = string | number | Callback | CallbackWithResponse | ArrayBuffer | typeof ByteBuffer;
export type SerializedOptions<Type> = Required<{
    [Property in keyof Type]: Type[Property] extends string ? string : Type[Property] extends number ? number : Type[Property] extends Record<string, unknown> ? string : Type[Property] extends string | Record<string, unknown> ? string : Type[Property] extends Array<unknown> ? string : Type[Property] extends Array<unknown> | undefined ? string : Type[Property] extends Record<string, unknown> | undefined ? string : Type[Property] extends Date ? number : Type[Property] extends Date | undefined ? number : Type[Property] extends string | undefined ? string : Type[Property] extends number | undefined ? number : Type[Property] extends Callback ? Callback : Type[Property] extends CallbackWithResponse ? CallbackWithResponse : Type[Property] extends Uint8Array ? typeof ByteBuffer : unknown;
}>;
declare const serializeArguments: <T extends Record<string, Argument> = Record<string, Argument>>(args: T) => Required<{ [Property in keyof T]: T[Property] extends string ? string : T[Property] extends number ? number : T[Property] extends Record<string, unknown> ? string : T[Property] extends string | Record<string, unknown> ? string : T[Property] extends unknown[] ? string : T[Property] extends unknown[] | undefined ? string : T[Property] extends Record<string, unknown> | undefined ? string : T[Property] extends Date ? number : T[Property] extends Date | undefined ? number : T[Property] extends string | undefined ? string : T[Property] extends number | undefined ? number : T[Property] extends Callback ? Callback : T[Property] extends CallbackWithResponse ? CallbackWithResponse : T[Property] extends Uint8Array ? import("ref-struct-di").StructType<{
    len: import("ref-napi").Type<string | number>;
    data: import("ref-napi").Type<import("ref-array-di").TypedArray<number, number>>;
}> : unknown; }>;
export { serializeArguments };
