"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeJSIndyVdr = void 0;
const indy_vdr_shared_1 = require("@hyperledger/indy-vdr-shared");
const ffi_1 = require("./ffi");
const library_1 = require("./library");
function handleReturnPointer(returnValue) {
    if (returnValue.address() === 0) {
        throw indy_vdr_shared_1.IndyVdrError.customError({ message: 'Unexpected null pointer' });
    }
    return returnValue.deref();
}
class NodeJSIndyVdr {
    constructor() {
        this.promisify = async (method) => {
            return new Promise((resolve, reject) => {
                const cb = (id, errorCode) => {
                    (0, ffi_1.deallocateCallback)(id);
                    try {
                        this.handleError(errorCode);
                    }
                    catch (e) {
                        reject(e);
                    }
                    resolve();
                };
                const { nativeCallback, id } = (0, ffi_1.toNativeCallback)(cb);
                method(nativeCallback, +id);
            });
        };
        this.promisifyWithResponse = async (method, isStream = false) => {
            return new Promise((resolve, reject) => {
                const cb = (id, errorCode, response) => {
                    (0, ffi_1.deallocateCallback)(id);
                    try {
                        this.handleError(errorCode);
                    }
                    catch (e) {
                        return reject(e);
                    }
                    try {
                        //this is required to add array brackets, and commas, to an invalid json object that
                        // should be a list
                        const mappedResponse = isStream ? '[' + response.replace(/\n/g, ',') + ']' : response;
                        if (mappedResponse.length === 0)
                            return resolve(null);
                        resolve(JSON.parse(mappedResponse));
                    }
                    catch (error) {
                        reject(error);
                    }
                };
                const { nativeCallback, id } = (0, ffi_1.toNativeCallbackWithResponse)(cb);
                method(nativeCallback, +id);
            });
        };
    }
    handleError(code) {
        if (code === 0)
            return;
        const nativeError = (0, ffi_1.allocateString)();
        this.nativeIndyVdr.indy_vdr_get_current_error(nativeError);
        const indyVdrErrorObject = JSON.parse(nativeError.deref());
        throw new indy_vdr_shared_1.IndyVdrError(indyVdrErrorObject);
    }
    get nativeIndyVdr() {
        return (0, library_1.getNativeIndyVdr)();
    }
    getCurrentError() {
        const error = (0, ffi_1.allocateString)();
        this.handleError(this.nativeIndyVdr.indy_vdr_get_current_error(error));
        return handleReturnPointer(error);
    }
    version() {
        return this.nativeIndyVdr.indy_vdr_version();
    }
    setConfig(options) {
        const { config } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_set_config(config));
    }
    setDefaultLogger() {
        this.handleError(this.nativeIndyVdr.indy_vdr_set_default_logger());
    }
    setProtocolVersion(options) {
        const { version } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_set_protocol_version(version));
    }
    setSocksProxy(options) {
        const { socksProxy } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_set_socks_proxy(socksProxy));
    }
    buildAcceptanceMechanismsRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { version, aml, submitterDid, amlContext } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_acceptance_mechanisms_request(submitterDid, aml, version, amlContext, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetAcceptanceMechanismsRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { submitterDid, timestamp, version } = (0, ffi_1.serializeArguments)(options);
        // We cannot handle this step in the serialization. Indy-vdr expects a -1 for an undefined timestamp
        const convertedTimestamp = timestamp !== null && timestamp !== void 0 ? timestamp : -1;
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_acceptance_mechanisms_request(submitterDid, convertedTimestamp, version, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildAttribRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { submitterDid, targetDid, raw, hash, enc } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_attrib_request(submitterDid, targetDid, hash, raw, enc, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetAttribRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { submitterDid, targetDid, raw, hash, enc, seqNo, timestamp } = (0, ffi_1.serializeArguments)(options);
        const convertedTimestamp = timestamp !== null && timestamp !== void 0 ? timestamp : -1;
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_attrib_request(submitterDid, targetDid, raw, hash, enc, seqNo, convertedTimestamp, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildCredDefRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { credentialDefinition, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_cred_def_request(submitterDid, credentialDefinition, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetCredDefRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { credentialDefinitionId, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_cred_def_request(submitterDid, credentialDefinitionId, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetRevocRegDefRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { revocationRegistryId, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_revoc_reg_def_request(submitterDid, revocationRegistryId, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetRevocRegRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { revocationRegistryId, timestamp, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_revoc_reg_request(submitterDid, revocationRegistryId, timestamp, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetRevocRegDeltaRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { revocationRegistryId, toTs, fromTs, submitterDid } = (0, ffi_1.serializeArguments)(options);
        const convertedFromTs = fromTs !== null && fromTs !== void 0 ? fromTs : -1;
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_revoc_reg_delta_request(submitterDid, revocationRegistryId, convertedFromTs, toTs, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildRevocRegDefRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { submitterDid, revocationRegistryDefinitionV1: revocationRegistryDefinition } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_revoc_reg_def_request(submitterDid, revocationRegistryDefinition, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildCustomRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { customRequest } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_custom_request(customRequest, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildDisableAllTxnAuthorAgreementsRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_disable_all_txn_author_agreements_request(submitterDid, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetNymRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { dest, submitterDid, seqNo, timestamp } = (0, ffi_1.serializeArguments)(options);
        const convertedSeqNo = seqNo !== null && seqNo !== void 0 ? seqNo : -1;
        const convertedTimestamp = timestamp !== null && timestamp !== void 0 ? timestamp : -1;
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_nym_request(submitterDid, dest, convertedSeqNo, convertedTimestamp, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetSchemaRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { schemaId, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_schema_request(submitterDid, schemaId, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetTxnAuthorAgreementRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { data, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_txn_author_agreement_request(submitterDid, data, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetTxnRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { ledgerType, seqNo, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_txn_request(submitterDid, ledgerType, seqNo, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildGetValidatorInfoRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_get_validator_info_request(submitterDid, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildNymRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { dest, submitterDid, alias, role, verkey, diddocContent } = (0, ffi_1.serializeArguments)(options);
        const version = options.version || -1;
        this.handleError(this.nativeIndyVdr.indy_vdr_build_nym_request(submitterDid, dest, verkey, alias, role, diddocContent, version, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildRevocRegEntryRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { revocationRegistryDefinitionId, revocationRegistryDefinitionType, revocationRegistryEntry, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_revoc_reg_entry_request(submitterDid, revocationRegistryDefinitionId, revocationRegistryDefinitionType, revocationRegistryEntry, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildSchemaRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { schema, submitterDid } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_build_schema_request(submitterDid, schema, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    buildTxnAuthorAgreementRequest(options) {
        const requestHandle = (0, ffi_1.allocateHandle)();
        const { submitterDid, version, ratificationTs, retirementTs, text } = (0, ffi_1.serializeArguments)(options);
        const convertedRatificationTs = ratificationTs !== null && ratificationTs !== void 0 ? ratificationTs : -1;
        const convertedRetirementTs = retirementTs !== null && retirementTs !== void 0 ? retirementTs : -1;
        this.handleError(this.nativeIndyVdr.indy_vdr_build_txn_author_agreement_request(submitterDid, text, version, convertedRatificationTs, convertedRetirementTs, requestHandle));
        return handleReturnPointer(requestHandle);
    }
    poolCreate(options) {
        const poolHandle = (0, ffi_1.allocateHandle)();
        const { parameters } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_pool_create(parameters, poolHandle));
        return handleReturnPointer(poolHandle);
    }
    async poolRefresh(options) {
        const { poolHandle } = (0, ffi_1.serializeArguments)(options);
        return this.promisify((cbPtr, id) => this.nativeIndyVdr.indy_vdr_pool_refresh(poolHandle, cbPtr, id));
    }
    async poolGetStatus(options) {
        const { poolHandle } = (0, ffi_1.serializeArguments)(options);
        const poolStatus = await this.promisifyWithResponse((cbPtr, id) => this.nativeIndyVdr.indy_vdr_pool_get_status(poolHandle, cbPtr, id));
        return (0, indy_vdr_shared_1.handleInvalidNullResponse)(poolStatus);
    }
    async poolGetTransactions(options) {
        const { poolHandle } = (0, ffi_1.serializeArguments)(options);
        const transactions = await this.promisifyWithResponse((cbPtr, id) => this.nativeIndyVdr.indy_vdr_pool_get_transactions(poolHandle, cbPtr, id), true);
        return (0, indy_vdr_shared_1.handleInvalidNullResponse)(transactions);
    }
    async poolGetVerifiers(options) {
        const { poolHandle } = (0, ffi_1.serializeArguments)(options);
        const verifiers = await this.promisifyWithResponse((cbPtr, id) => this.nativeIndyVdr.indy_vdr_pool_get_verifiers(poolHandle, cbPtr, id));
        return (0, indy_vdr_shared_1.handleInvalidNullResponse)(verifiers);
    }
    async poolSubmitAction(options) {
        const { requestHandle, poolHandle, nodes, timeout } = (0, ffi_1.serializeArguments)(options);
        const response = await this.promisifyWithResponse((cbPtr, id) => this.nativeIndyVdr.indy_vdr_pool_submit_action(poolHandle, requestHandle, nodes, timeout, cbPtr, id));
        return (0, indy_vdr_shared_1.handleInvalidNullResponse)(response);
    }
    async poolSubmitRequest(options) {
        const { requestHandle, poolHandle } = (0, ffi_1.serializeArguments)(options);
        const response = await this.promisifyWithResponse((cbPtr, id) => this.nativeIndyVdr.indy_vdr_pool_submit_request(poolHandle, requestHandle, cbPtr, id));
        return (0, indy_vdr_shared_1.handleInvalidNullResponse)(response);
    }
    poolClose(options) {
        const { poolHandle } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_pool_close(poolHandle));
    }
    prepareTxnAuthorAgreementAcceptance(options) {
        const output = (0, ffi_1.allocateString)();
        const { acceptanceMechanismType, time, taaDigest, text, version } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_prepare_txn_author_agreement_acceptance(text, version, taaDigest, acceptanceMechanismType, time, output));
        return handleReturnPointer(output);
    }
    requestFree(options) {
        const { requestHandle } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_request_free(requestHandle));
    }
    requestGetBody(options) {
        const output = (0, ffi_1.allocateString)();
        const { requestHandle } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_request_get_body(requestHandle, output));
        return handleReturnPointer(output);
    }
    requestGetSignatureInput(options) {
        const output = (0, ffi_1.allocateString)();
        const { requestHandle } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_request_get_signature_input(requestHandle, output));
        return handleReturnPointer(output);
    }
    requestSetEndorser(options) {
        const { endorser, requestHandle } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_request_set_endorser(requestHandle, endorser));
    }
    requestSetMultiSignature(options) {
        const { identifier, requestHandle, signature } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_request_set_multi_signature(requestHandle, identifier, signature));
    }
    requestSetSignature(options) {
        const { requestHandle, signature } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_request_set_signature(requestHandle, signature));
    }
    requestSetTxnAuthorAgreementAcceptance(options) {
        const { acceptance, requestHandle } = (0, ffi_1.serializeArguments)(options);
        this.handleError(this.nativeIndyVdr.indy_vdr_request_set_txn_author_agreement_acceptance(requestHandle, acceptance));
    }
}
exports.NodeJSIndyVdr = NodeJSIndyVdr;
//# sourceMappingURL=NodeJSIndyVdr.js.map