"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scan = void 0;
const ariesAskar_1 = require("../ariesAskar");
const error_1 = require("../error");
const EntryList_1 = require("./EntryList");
class Scan {
    constructor({ category, limit, offset, profile, tagFilter, store, }) {
        this.category = category;
        this.profile = profile;
        this.tagFilter = tagFilter;
        this.offset = offset;
        this.limit = limit;
        this.store = store;
    }
    get handle() {
        return this._handle;
    }
    async forEach(cb) {
        var _a;
        if (!this.handle) {
            if (!((_a = this.store) === null || _a === void 0 ? void 0 : _a.handle))
                throw error_1.AriesAskarError.customError({ message: 'Cannot scan from closed store' });
            this._handle = await ariesAskar_1.ariesAskar.scanStart({
                storeHandle: this.store.handle,
                limit: this.limit,
                offset: this.offset,
                tagFilter: this.tagFilter,
                profile: this.profile,
                category: this.category,
            });
        }
        try {
            let recordCount = 0;
            // Loop while limit not reached (or no limit specified)
            while (!this.limit || recordCount < this.limit) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                const listHandle = await ariesAskar_1.ariesAskar.scanNext({ scanHandle: this._handle });
                if (!listHandle)
                    break;
                this._listHandle = listHandle;
                const list = new EntryList_1.EntryList({ handle: this._listHandle });
                recordCount = recordCount + list.length;
                for (let index = 0; index < list.length; index++) {
                    const entry = list.getEntryByIndex(index);
                    cb(entry);
                }
            }
        }
        finally {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            ariesAskar_1.ariesAskar.scanFree({ scanHandle: this._handle });
        }
    }
    async fetchAll() {
        const rows = [];
        await this.forEach((row) => rows.push(row.toJson()));
        return rows;
    }
}
exports.Scan = Scan;
//# sourceMappingURL=Scan.js.map