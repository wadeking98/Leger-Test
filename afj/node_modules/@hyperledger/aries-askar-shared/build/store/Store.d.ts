import type { StoreKeyMethod } from './StoreKeyMethod';
import type { StoreHandle } from '../crypto';
import { OpenSession } from './OpenSession';
import { Scan } from './Scan';
export declare class Store {
    private _handle;
    private _opener?;
    private _uri;
    constructor({ handle, uri }: {
        handle: StoreHandle;
        uri: string;
    });
    get handle(): StoreHandle;
    static generateRawKey(seed?: Uint8Array): string;
    get uri(): string;
    createProfile(name?: string): Promise<string>;
    getDefaultProfile(): Promise<string>;
    setDefaultProfile(name: string): Promise<void>;
    listProfiles(): Promise<string[]>;
    removeProfile(name: string): Promise<number>;
    rekey({ keyMethod, passKey }: {
        keyMethod?: StoreKeyMethod;
        passKey: string;
    }): Promise<void>;
    static provision({ uri, recreate, keyMethod, passKey, profile, }: {
        uri: string;
        keyMethod?: StoreKeyMethod;
        passKey?: string;
        profile?: string;
        recreate: boolean;
    }): Promise<Store>;
    static open({ uri, keyMethod, passKey, profile, }: {
        uri: string;
        keyMethod?: StoreKeyMethod;
        passKey?: string;
        profile?: string;
    }): Promise<Store>;
    close(remove?: boolean): Promise<number | false>;
    static remove(uri: string): Promise<number>;
    session(profile?: string): OpenSession;
    transaction(profile?: string): OpenSession;
    openSession(isTransaction?: boolean): Promise<import("./Session").Session>;
    scan(options: {
        category: string;
        tagFilter?: Record<string, unknown>;
        offset?: number;
        limit?: number;
        profile?: string;
    }): Scan;
    copyTo({ uri, keyMethod, passKey, recreate, }: {
        uri: string;
        keyMethod?: StoreKeyMethod;
        passKey?: string;
        recreate: boolean;
    }): Promise<void>;
}
