import type { Key, SessionHandle } from '../crypto';
import type { KeyAlgs } from '../enums';
export declare class Session {
    private _handle?;
    private isTxn;
    constructor({ handle, isTxn }: {
        handle?: SessionHandle;
        isTxn: boolean;
    });
    get isTransaction(): boolean;
    get handle(): SessionHandle | undefined;
    count({ category, tagFilter }: {
        category: string;
        tagFilter?: Record<string, unknown>;
    }): Promise<number>;
    fetch({ category, name, forUpdate, isJson, }: {
        category: string;
        name: string;
        forUpdate?: boolean;
        isJson?: boolean;
    }): Promise<import("./Entry").EntryObject | null>;
    fetchAll({ category, forUpdate, limit, tagFilter, isJson, }: {
        category: string;
        tagFilter?: Record<string, unknown>;
        limit?: number;
        forUpdate?: boolean;
        isJson?: boolean;
    }): Promise<import("./Entry").EntryObject[]>;
    insert({ category, name, expiryMs, tags, value, }: {
        category: string;
        name: string;
        value: string | Record<string, unknown>;
        tags?: Record<string, unknown>;
        expiryMs?: number;
    }): Promise<void>;
    replace({ category, name, expiryMs, tags, value, }: {
        category: string;
        name: string;
        value: string | Record<string, unknown>;
        tags?: Record<string, unknown>;
        expiryMs?: number;
    }): Promise<void>;
    remove({ category, name }: {
        category: string;
        name: string;
    }): Promise<void>;
    removeAll({ category, tagFilter }: {
        category: string;
        tagFilter?: Record<string, unknown>;
    }): Promise<void>;
    insertKey({ name, key, expiryMs, metadata, tags, }: {
        name: string;
        key: Key;
        metadata?: string;
        tags?: Record<string, unknown>;
        expiryMs?: number;
    }): Promise<void>;
    fetchKey({ name, forUpdate }: {
        name: string;
        forUpdate?: boolean;
    }): Promise<import("./KeyEntry").KeyEntryObject | null>;
    fetchAllKeys({ forUpdate, algorithm, limit, tagFilter, thumbprint, }: {
        algorithm?: KeyAlgs;
        thumbprint?: string;
        tagFilter?: Record<string, unknown>;
        limit?: number;
        forUpdate?: boolean;
    }): Promise<import("./KeyEntry").KeyEntryObject[]>;
    updateKey({ name, expiryMs, metadata, tags, }: {
        name: string;
        metadata?: string;
        tags?: Record<string, unknown>;
        expiryMs?: number;
    }): Promise<void>;
    removeKey({ name }: {
        name: string;
    }): Promise<void>;
    /**
     * @note also closes the session
     */
    commit(): Promise<void>;
    rollback(): Promise<void>;
    close(): Promise<void>;
}
