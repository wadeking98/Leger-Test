"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Store = void 0;
const ariesAskar_1 = require("../ariesAskar");
const OpenSession_1 = require("./OpenSession");
const Scan_1 = require("./Scan");
class Store {
    constructor({ handle, uri }) {
        this._handle = handle;
        this._uri = uri;
    }
    get handle() {
        return this._handle;
    }
    static generateRawKey(seed) {
        return ariesAskar_1.ariesAskar.storeGenerateRawKey({ seed });
    }
    get uri() {
        return this._uri;
    }
    async createProfile(name) {
        return ariesAskar_1.ariesAskar.storeCreateProfile({ storeHandle: this.handle, profile: name });
    }
    async getDefaultProfile() {
        return ariesAskar_1.ariesAskar.storeGetDefaultProfile({ storeHandle: this.handle });
    }
    async setDefaultProfile(name) {
        return ariesAskar_1.ariesAskar.storeSetDefaultProfile({ storeHandle: this.handle, profile: name });
    }
    async listProfiles() {
        return ariesAskar_1.ariesAskar.storeListProfiles({ storeHandle: this.handle });
    }
    async removeProfile(name) {
        return await ariesAskar_1.ariesAskar.storeRemoveProfile({ profile: name, storeHandle: this.handle });
    }
    async rekey({ keyMethod, passKey }) {
        return await ariesAskar_1.ariesAskar.storeRekey({ keyMethod: keyMethod === null || keyMethod === void 0 ? void 0 : keyMethod.toUri(), passKey, storeHandle: this.handle });
    }
    static async provision({ uri, recreate, keyMethod, passKey, profile, }) {
        const handle = await ariesAskar_1.ariesAskar.storeProvision({
            specUri: uri,
            keyMethod: keyMethod === null || keyMethod === void 0 ? void 0 : keyMethod.toUri(),
            profile,
            passKey,
            recreate,
        });
        return new Store({ handle, uri });
    }
    static async open({ uri, keyMethod, passKey, profile, }) {
        const handle = await ariesAskar_1.ariesAskar.storeOpen({ profile, passKey, keyMethod: keyMethod === null || keyMethod === void 0 ? void 0 : keyMethod.toUri(), specUri: uri });
        return new Store({ uri, handle });
    }
    async close(remove = false) {
        this._opener = undefined;
        if (this.handle)
            await this.handle.close();
        return remove ? await Store.remove(this.uri) : false;
    }
    static async remove(uri) {
        return await ariesAskar_1.ariesAskar.storeRemove({ specUri: uri });
    }
    session(profile) {
        return new OpenSession_1.OpenSession({ store: this.handle, profile, isTxn: false });
    }
    transaction(profile) {
        return new OpenSession_1.OpenSession({ store: this.handle, profile, isTxn: true });
    }
    async openSession(isTransaction = false) {
        var _a;
        (_a = this._opener) !== null && _a !== void 0 ? _a : (this._opener = new OpenSession_1.OpenSession({ store: this.handle, isTxn: isTransaction }));
        return await this._opener.open();
    }
    scan(options) {
        return new Scan_1.Scan(Object.assign(Object.assign({}, options), { store: this }));
    }
    async copyTo({ uri, keyMethod, passKey, recreate, }) {
        await ariesAskar_1.ariesAskar.storeCopyTo({
            storeHandle: this.handle,
            targetUri: uri,
            keyMethod: keyMethod === null || keyMethod === void 0 ? void 0 : keyMethod.toUri(),
            passKey,
            recreate,
        });
    }
}
exports.Store = Store;
//# sourceMappingURL=Store.js.map