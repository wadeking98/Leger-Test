type ArcHandleType = Uint8Array | string | null;
export declare class ArcHandle {
    handle: Uint8Array | string;
    constructor(handle: Uint8Array | string);
    static fromHandle(handle: ArcHandleType): ArcHandle | null;
}
export declare class StoreHandle {
    handle: number;
    constructor(handle: number);
    close(): Promise<void>;
    static fromHandle(handle: number | null): StoreHandle;
}
export declare class ScanHandle {
    handle: number;
    constructor(handle: number);
    free(): void;
    static fromHandle(handle: number | null): ScanHandle;
}
export declare class SessionHandle {
    handle: number;
    constructor(handle: number);
    close(commit: boolean): Promise<void>;
    static fromHandle(handle: number | null): SessionHandle;
}
export declare class EntryListHandle extends ArcHandle {
    getCategory(index: number): string;
    getName(index: number): string;
    getValue(index: number): Uint8Array;
    getTags(index: number): string | null;
    free(): void;
    static fromHandle(handle: ArcHandleType): EntryListHandle | null;
}
export declare class KeyEntryListHandle extends ArcHandle {
    getAlgorithm(index: number): string;
    getName(index: number): string;
    getTags(index: number): string | null;
    getMetadata(index: number): string | null;
    loadKey(index: number): LocalKeyHandle;
    free(): void;
    static fromHandle(handle: ArcHandleType): KeyEntryListHandle | null;
}
export declare class LocalKeyHandle extends ArcHandle {
    free(): void;
    static fromHandle(handle: ArcHandleType): LocalKeyHandle | null;
}
export {};
