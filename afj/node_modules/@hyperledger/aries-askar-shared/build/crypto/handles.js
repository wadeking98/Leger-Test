"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalKeyHandle = exports.KeyEntryListHandle = exports.EntryListHandle = exports.SessionHandle = exports.ScanHandle = exports.StoreHandle = exports.ArcHandle = void 0;
const ariesAskar_1 = require("../ariesAskar");
const error_1 = require("../error");
class ArcHandle {
    constructor(handle) {
        if (handle === '0') {
            throw error_1.AriesAskarError.customError({
                message: 'Invalid handle. This means that the function call succeeded but none was found.',
            });
        }
        this.handle = handle;
    }
    static fromHandle(handle) {
        return fromPointerHandle(this, handle);
    }
}
exports.ArcHandle = ArcHandle;
class StoreHandle {
    constructor(handle) {
        this.handle = handle;
    }
    async close() {
        await ariesAskar_1.ariesAskar.storeClose({ storeHandle: this });
    }
    static fromHandle(handle) {
        return fromSequenceHandle(this, handle);
    }
}
exports.StoreHandle = StoreHandle;
class ScanHandle {
    constructor(handle) {
        this.handle = handle;
    }
    free() {
        ariesAskar_1.ariesAskar.scanFree({ scanHandle: this });
    }
    static fromHandle(handle) {
        return fromSequenceHandle(this, handle);
    }
}
exports.ScanHandle = ScanHandle;
class SessionHandle {
    constructor(handle) {
        this.handle = handle;
    }
    async close(commit) {
        await ariesAskar_1.ariesAskar.sessionClose({ commit, sessionHandle: this });
    }
    static fromHandle(handle) {
        return fromSequenceHandle(this, handle);
    }
}
exports.SessionHandle = SessionHandle;
class EntryListHandle extends ArcHandle {
    getCategory(index) {
        return ariesAskar_1.ariesAskar.entryListGetCategory({ index, entryListHandle: this });
    }
    getName(index) {
        return ariesAskar_1.ariesAskar.entryListGetName({ index, entryListHandle: this });
    }
    getValue(index) {
        return ariesAskar_1.ariesAskar.entryListGetValue({ index, entryListHandle: this });
    }
    getTags(index) {
        return ariesAskar_1.ariesAskar.entryListGetTags({ index, entryListHandle: this });
    }
    free() {
        ariesAskar_1.ariesAskar.entryListFree({ entryListHandle: this });
    }
    static fromHandle(handle) {
        return fromPointerHandle(this, handle);
    }
}
exports.EntryListHandle = EntryListHandle;
class KeyEntryListHandle extends ArcHandle {
    getAlgorithm(index) {
        return ariesAskar_1.ariesAskar.keyEntryListGetAlgorithm({ index, keyEntryListHandle: this });
    }
    getName(index) {
        return ariesAskar_1.ariesAskar.keyEntryListGetName({ index, keyEntryListHandle: this });
    }
    getTags(index) {
        return ariesAskar_1.ariesAskar.keyEntryListGetTags({ index, keyEntryListHandle: this });
    }
    getMetadata(index) {
        return ariesAskar_1.ariesAskar.keyEntryListGetMetadata({ index, keyEntryListHandle: this });
    }
    loadKey(index) {
        return ariesAskar_1.ariesAskar.keyEntryListLoadLocal({ index, keyEntryListHandle: this });
    }
    free() {
        ariesAskar_1.ariesAskar.keyEntryListFree({ keyEntryListHandle: this });
    }
    static fromHandle(handle) {
        return fromPointerHandle(this, handle);
    }
}
exports.KeyEntryListHandle = KeyEntryListHandle;
class LocalKeyHandle extends ArcHandle {
    free() {
        ariesAskar_1.ariesAskar.keyFree({ localKeyHandle: this });
    }
    static fromHandle(handle) {
        return fromPointerHandle(this, handle);
    }
}
exports.LocalKeyHandle = LocalKeyHandle;
/**
 * Instantiate an handle class based on a received handle. If the handle has a value
 * of null, the handle class won't be instantiated but rather null will be returned.
 */
function fromPointerHandle(HandleClass, handle) {
    return (handle ? new HandleClass(handle) : null);
}
function fromSequenceHandle(HandleClass, handle) {
    if (handle === null) {
        throw error_1.AriesAskarError.customError({ message: 'Invalid handle' });
    }
    return new HandleClass(handle);
}
//# sourceMappingURL=handles.js.map