import type { KeyAlgs } from '../enums';
import { Jwk } from './Jwk';
import { Key } from './Key';
export declare class EcdhEs {
    private algId;
    private apu;
    private apv;
    constructor({ apv, apu, algId }: {
        algId: Uint8Array;
        apu: Uint8Array;
        apv: Uint8Array;
    });
    private deriveKey;
    encryptDirect({ encAlg, recipientKey, ephemeralKey, message, aad, nonce, }: {
        encAlg: KeyAlgs;
        ephemeralKey: Key | Jwk;
        recipientKey: Key | Jwk;
        message: Uint8Array;
        aad?: Uint8Array;
        nonce?: Uint8Array;
    }): import("..").EncryptedBuffer;
    decryptDirect({ nonce, encAlg, recipientKey, ciphertext, ephemeralKey, tag, aad, }: {
        encAlg: KeyAlgs;
        ephemeralKey: Key | Jwk;
        recipientKey: Key | Jwk;
        ciphertext: Uint8Array;
        nonce: Uint8Array;
        tag: Uint8Array;
        aad?: Uint8Array;
    }): Uint8Array;
    senderWrapKey({ wrapAlg, ephemeralKey, recipientKey, cek, }: {
        wrapAlg: KeyAlgs;
        ephemeralKey: Key;
        recipientKey: Key;
        cek: Key;
    }): import("..").EncryptedBuffer;
    receiverUnwrapKey({ recipientKey, wrapAlg, ephemeralKey, encAlg, ciphertext, nonce, tag, }: {
        wrapAlg: KeyAlgs;
        encAlg: KeyAlgs;
        ephemeralKey: Key;
        recipientKey: Key;
        ciphertext: Uint8Array;
        nonce?: Uint8Array;
        tag?: Uint8Array;
    }): Key;
}
