"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeBindings = void 0;
const ref_napi_1 = require("@2060.io/ref-napi");
const ffi_1 = require("../ffi");
exports.nativeBindings = {
    // first element is method return type, second element is list of method argument types
    askar_version: [ffi_1.FFI_STRING, []],
    askar_get_current_error: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING_PTR]],
    askar_buffer_free: [ffi_1.FFI_ERROR_CODE, [ffi_1.SecretBufferStruct]],
    askar_clear_custom_logger: [ffi_1.FFI_ERROR_CODE, []],
    askar_set_custom_logger: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_INT32, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_INT32, ffi_1.FFI_INT32, ffi_1.FFI_INT32]],
    askar_set_default_logger: [ffi_1.FFI_ERROR_CODE, []],
    askar_set_max_log_level: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_INT32]],
    askar_entry_list_count: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32_PTR]],
    askar_entry_list_free: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_ENTRY_LIST_HANDLE]],
    askar_entry_list_get_category: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.FFI_STRING_PTR]],
    askar_entry_list_get_name: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.FFI_STRING_PTR]],
    askar_entry_list_get_tags: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.FFI_STRING_PTR]],
    askar_entry_list_get_value: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.SecretBufferStructPtr]],
    askar_string_list_count: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING_LIST_HANDLE, ffi_1.FFI_INT32_PTR]],
    askar_string_list_free: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING_LIST_HANDLE]],
    askar_string_list_get_item: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.FFI_STRING_PTR]],
    askar_key_aead_decrypt: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.SecretBufferStructPtr],
    ],
    askar_key_aead_encrypt: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.EncryptedBufferStructPtr],
    ],
    askar_key_aead_get_padding: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.FFI_INT64, ffi_1.FFI_INT32_PTR]],
    askar_key_aead_get_params: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.AeadParamsStructPtr]],
    askar_key_aead_random_nonce: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.SecretBufferStructPtr]],
    askar_key_convert: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.FFI_STRING, (0, ref_napi_1.refType)(ffi_1.FFI_POINTER)]],
    askar_key_crypto_box: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_POINTER, ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.SecretBufferStructPtr],
    ],
    askar_key_crypto_box_open: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_POINTER, ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.SecretBufferStructPtr],
    ],
    askar_key_crypto_box_random_nonce: [ffi_1.FFI_ERROR_CODE, [ffi_1.SecretBufferStructPtr]],
    askar_key_crypto_box_seal: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.SecretBufferStructPtr]],
    askar_key_crypto_box_seal_open: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.SecretBufferStructPtr]],
    askar_key_derive_ecdh_1pu: [
        ffi_1.FFI_ERROR_CODE,
        [
            ffi_1.FFI_STRING,
            ffi_1.FFI_POINTER,
            ffi_1.FFI_POINTER,
            ffi_1.FFI_POINTER,
            ffi_1.ByteBufferStruct,
            ffi_1.ByteBufferStruct,
            ffi_1.ByteBufferStruct,
            ffi_1.ByteBufferStruct,
            ffi_1.FFI_INT8,
            (0, ref_napi_1.refType)(ffi_1.FFI_POINTER),
        ],
    ],
    askar_key_derive_ecdh_es: [
        ffi_1.FFI_ERROR_CODE,
        [
            ffi_1.FFI_STRING,
            ffi_1.FFI_POINTER,
            ffi_1.FFI_POINTER,
            ffi_1.ByteBufferStruct,
            ffi_1.ByteBufferStruct,
            ffi_1.ByteBufferStruct,
            ffi_1.FFI_INT8,
            (0, ref_napi_1.refType)(ffi_1.FFI_POINTER),
        ],
    ],
    askar_key_entry_list_count: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_KEY_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32_PTR]],
    askar_key_entry_list_free: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_KEY_ENTRY_LIST_HANDLE]],
    askar_key_entry_list_get_algorithm: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_KEY_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.FFI_STRING_PTR]],
    askar_key_entry_list_get_metadata: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_KEY_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.FFI_STRING_PTR]],
    askar_key_entry_list_get_name: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_KEY_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.FFI_STRING_PTR]],
    askar_key_entry_list_get_tags: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_KEY_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, ffi_1.FFI_STRING_PTR]],
    askar_key_entry_list_load_local: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_KEY_ENTRY_LIST_HANDLE, ffi_1.FFI_INT32, (0, ref_napi_1.refType)(ffi_1.FFI_POINTER)]],
    askar_key_free: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER]],
    askar_key_from_jwk: [ffi_1.FFI_ERROR_CODE, [ffi_1.ByteBufferStruct, (0, ref_napi_1.refType)(ffi_1.FFI_POINTER)]],
    askar_key_from_key_exchange: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING, ffi_1.FFI_POINTER, ffi_1.FFI_POINTER, ffi_1.FFI_LOCAL_KEY_HANDLE]],
    askar_key_from_public_bytes: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING, ffi_1.ByteBufferStruct, ffi_1.FFI_LOCAL_KEY_HANDLE]],
    askar_key_from_secret_bytes: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING, ffi_1.ByteBufferStruct, (0, ref_napi_1.refType)(ffi_1.FFI_POINTER)]],
    askar_key_from_seed: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING, ffi_1.ByteBufferStruct, ffi_1.FFI_STRING, ffi_1.FFI_LOCAL_KEY_HANDLE]],
    askar_key_generate: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING, ffi_1.FFI_INT8, ffi_1.FFI_LOCAL_KEY_HANDLE]],
    askar_key_get_algorithm: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.FFI_STRING_PTR]],
    askar_key_get_ephemeral: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.FFI_INT8_PTR]],
    askar_key_get_jwk_public: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.FFI_STRING, ffi_1.FFI_STRING_PTR]],
    askar_key_get_jwk_secret: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.SecretBufferStructPtr]],
    askar_key_get_jwk_thumbprint: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.FFI_STRING, ffi_1.FFI_STRING_PTR]],
    askar_key_get_public_bytes: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.SecretBufferStructPtr]],
    askar_key_get_secret_bytes: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.SecretBufferStructPtr]],
    askar_key_sign_message: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.FFI_STRING, ffi_1.SecretBufferStructPtr]],
    askar_key_unwrap_key: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_POINTER, ffi_1.FFI_STRING, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, (0, ref_napi_1.refType)(ffi_1.FFI_POINTER)],
    ],
    askar_key_verify_signature: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.ByteBufferStruct, ffi_1.FFI_STRING, ffi_1.FFI_INT8_PTR],
    ],
    askar_key_wrap_key: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_POINTER, ffi_1.FFI_POINTER, ffi_1.ByteBufferStruct, ffi_1.EncryptedBufferStructPtr]],
    askar_scan_free: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_SCAN_HANDLE]],
    askar_scan_next: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_SCAN_HANDLE, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_scan_start: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_INT64, ffi_1.FFI_INT64, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_session_close: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_INT8, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_session_count: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_session_fetch: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_INT8, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_session_fetch_all: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_INT64, ffi_1.FFI_INT8, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_session_fetch_all_keys: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_INT64, ffi_1.FFI_INT8, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_session_fetch_key: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_INT8, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_session_insert_key: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_POINTER, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_INT64, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_session_remove_all: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_session_remove_key: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_session_start: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_INT8, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_session_update: [
        ffi_1.FFI_ERROR_CODE,
        [
            ffi_1.FFI_SESSION_HANDLE,
            ffi_1.FFI_INT8,
            ffi_1.FFI_STRING,
            ffi_1.FFI_STRING,
            ffi_1.ByteBufferStruct,
            ffi_1.FFI_STRING,
            ffi_1.FFI_INT64,
            ffi_1.FFI_CALLBACK_PTR,
            ffi_1.FFI_CALLBACK_ID,
        ],
    ],
    askar_session_update_key: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_SESSION_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_INT64, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_store_close: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_store_copy: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_INT8, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_store_create_profile: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_store_generate_raw_key: [ffi_1.FFI_ERROR_CODE, [ffi_1.ByteBufferStruct, ffi_1.FFI_STRING_PTR]],
    askar_store_get_profile_name: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_store_get_default_profile: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_store_list_profiles: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_store_open: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_store_provision: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_INT8, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
    askar_store_rekey: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_store_remove: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_store_remove_profile: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_store_set_default_profile: [ffi_1.FFI_ERROR_CODE, [ffi_1.FFI_STORE_HANDLE, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID]],
    askar_migrate_indy_sdk: [
        ffi_1.FFI_ERROR_CODE,
        [ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_STRING, ffi_1.FFI_CALLBACK_PTR, ffi_1.FFI_CALLBACK_ID],
    ],
};
//# sourceMappingURL=bindings.js.map