export declare const nativeBindings: {
    readonly askar_version: readonly ["string", readonly []];
    readonly askar_get_current_error: readonly ["int64", readonly [import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_buffer_free: readonly ["int64", readonly [import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>]];
    readonly askar_clear_custom_logger: readonly ["int64", readonly []];
    readonly askar_set_custom_logger: readonly ["int64", readonly ["int32", "pointer", "int32", "int32", "int32"]];
    readonly askar_set_default_logger: readonly ["int64", readonly []];
    readonly askar_set_max_log_level: readonly ["int64", readonly ["int32"]];
    readonly askar_entry_list_count: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<number>>]];
    readonly askar_entry_list_free: readonly ["int64", readonly ["pointer"]];
    readonly askar_entry_list_get_category: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_entry_list_get_name: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_entry_list_get_tags: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_entry_list_get_value: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_string_list_count: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<number>>]];
    readonly askar_string_list_free: readonly ["int64", readonly ["pointer"]];
    readonly askar_string_list_get_item: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_key_aead_decrypt: readonly ["int64", readonly ["pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_aead_encrypt: readonly ["int64", readonly ["pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        secretBuffer: import("ref-struct-di").StructObject<{
            len: string | number;
            data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
        }>;
        tagPos: string | number;
        noncePos: string | number;
    }>>>]];
    readonly askar_key_aead_get_padding: readonly ["int64", readonly ["pointer", "int64", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<number>>]];
    readonly askar_key_aead_get_params: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        nonceLength: number;
        tagLength: number;
    }>>>]];
    readonly askar_key_aead_random_nonce: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_convert: readonly ["int64", readonly ["pointer", "string", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("@2060.io/ref-napi").Pointer<unknown>>>]];
    readonly askar_key_crypto_box: readonly ["int64", readonly ["pointer", "pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_crypto_box_open: readonly ["int64", readonly ["pointer", "pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_crypto_box_random_nonce: readonly ["int64", readonly [import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_crypto_box_seal: readonly ["int64", readonly ["pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_crypto_box_seal_open: readonly ["int64", readonly ["pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_derive_ecdh_1pu: readonly ["int64", readonly ["string", "pointer", "pointer", "pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, "int8", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("@2060.io/ref-napi").Pointer<unknown>>>]];
    readonly askar_key_derive_ecdh_es: readonly ["int64", readonly ["string", "pointer", "pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, "int8", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("@2060.io/ref-napi").Pointer<unknown>>>]];
    readonly askar_key_entry_list_count: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<number>>]];
    readonly askar_key_entry_list_free: readonly ["int64", readonly ["pointer"]];
    readonly askar_key_entry_list_get_algorithm: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_key_entry_list_get_metadata: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_key_entry_list_get_name: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_key_entry_list_get_tags: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_key_entry_list_load_local: readonly ["int64", readonly ["pointer", "int32", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("@2060.io/ref-napi").Pointer<unknown>>>]];
    readonly askar_key_free: readonly ["int64", readonly ["pointer"]];
    readonly askar_key_from_jwk: readonly ["int64", readonly [import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("@2060.io/ref-napi").Pointer<unknown>>>]];
    readonly askar_key_from_key_exchange: readonly ["int64", readonly ["string", "pointer", "pointer", "pointer"]];
    readonly askar_key_from_public_bytes: readonly ["int64", readonly ["string", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, "pointer"]];
    readonly askar_key_from_secret_bytes: readonly ["int64", readonly ["string", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("@2060.io/ref-napi").Pointer<unknown>>>]];
    readonly askar_key_from_seed: readonly ["int64", readonly ["string", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, "string", "pointer"]];
    readonly askar_key_generate: readonly ["int64", readonly ["string", "int8", "pointer"]];
    readonly askar_key_get_algorithm: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_key_get_ephemeral: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<number>>]];
    readonly askar_key_get_jwk_public: readonly ["int64", readonly ["pointer", "string", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_key_get_jwk_secret: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_get_jwk_thumbprint: readonly ["int64", readonly ["pointer", "string", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_key_get_public_bytes: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_get_secret_bytes: readonly ["int64", readonly ["pointer", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_sign_message: readonly ["int64", readonly ["pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, "string", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        len: string | number;
        data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
    }>>>]];
    readonly askar_key_unwrap_key: readonly ["int64", readonly ["pointer", "string", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("@2060.io/ref-napi").Pointer<unknown>>>]];
    readonly askar_key_verify_signature: readonly ["int64", readonly ["pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, "string", import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<number>>]];
    readonly askar_key_wrap_key: readonly ["int64", readonly ["pointer", "pointer", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-struct-di").StructObject<{
        secretBuffer: import("ref-struct-di").StructObject<{
            len: string | number;
            data: import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>;
        }>;
        tagPos: string | number;
        noncePos: string | number;
    }>>>]];
    readonly askar_scan_free: readonly ["int64", readonly ["size_t"]];
    readonly askar_scan_next: readonly ["int64", readonly ["size_t", "pointer", "int64"]];
    readonly askar_scan_start: readonly ["int64", readonly ["size_t", "string", "string", "string", "int64", "int64", "pointer", "int64"]];
    readonly askar_session_close: readonly ["int64", readonly ["size_t", "int8", "pointer", "int64"]];
    readonly askar_session_count: readonly ["int64", readonly ["size_t", "string", "string", "pointer", "int64"]];
    readonly askar_session_fetch: readonly ["int64", readonly ["size_t", "string", "string", "int8", "pointer", "int64"]];
    readonly askar_session_fetch_all: readonly ["int64", readonly ["size_t", "string", "string", "int64", "int8", "pointer", "int64"]];
    readonly askar_session_fetch_all_keys: readonly ["int64", readonly ["size_t", "string", "string", "string", "int64", "int8", "pointer", "int64"]];
    readonly askar_session_fetch_key: readonly ["int64", readonly ["size_t", "string", "int8", "pointer", "int64"]];
    readonly askar_session_insert_key: readonly ["int64", readonly ["size_t", "pointer", "string", "string", "string", "int64", "pointer", "int64"]];
    readonly askar_session_remove_all: readonly ["int64", readonly ["size_t", "string", "string", "pointer", "int64"]];
    readonly askar_session_remove_key: readonly ["int64", readonly ["size_t", "string", "pointer", "int64"]];
    readonly askar_session_start: readonly ["int64", readonly ["size_t", "string", "int8", "pointer", "int64"]];
    readonly askar_session_update: readonly ["int64", readonly ["size_t", "int8", "string", "string", import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, "string", "int64", "pointer", "int64"]];
    readonly askar_session_update_key: readonly ["int64", readonly ["size_t", "string", "string", "string", "int64", "pointer", "int64"]];
    readonly askar_store_close: readonly ["int64", readonly ["size_t", "pointer", "int64"]];
    readonly askar_store_copy: readonly ["int64", readonly ["size_t", "string", "string", "string", "int8", "pointer", "int64"]];
    readonly askar_store_create_profile: readonly ["int64", readonly ["size_t", "string", "pointer", "int64"]];
    readonly askar_store_generate_raw_key: readonly ["int64", readonly [import("ref-struct-di").StructType<{
        len: import("ref-napi").Type<string | number>;
        data: import("ref-napi").Type<import("@2060.io/ref-napi").Pointer<import("ref-array-di").TypedArray<number, number>>>;
    }>, import("@2060.io/ref-napi").Type<import("@2060.io/ref-napi").Pointer<string | null>>]];
    readonly askar_store_get_profile_name: readonly ["int64", readonly ["size_t", "pointer", "int64"]];
    readonly askar_store_get_default_profile: readonly ["int64", readonly ["size_t", "pointer", "int64"]];
    readonly askar_store_list_profiles: readonly ["int64", readonly ["size_t", "pointer", "int64"]];
    readonly askar_store_open: readonly ["int64", readonly ["string", "string", "string", "string", "pointer", "int64"]];
    readonly askar_store_provision: readonly ["int64", readonly ["string", "string", "string", "string", "int8", "pointer", "int64"]];
    readonly askar_store_rekey: readonly ["int64", readonly ["size_t", "string", "string", "pointer", "int64"]];
    readonly askar_store_remove: readonly ["int64", readonly ["string", "pointer", "int64"]];
    readonly askar_store_remove_profile: readonly ["int64", readonly ["size_t", "string", "pointer", "int64"]];
    readonly askar_store_set_default_profile: readonly ["int64", readonly ["size_t", "string", "pointer", "int64"]];
    readonly askar_migrate_indy_sdk: readonly ["int64", readonly ["string", "string", "string", "string", "pointer", "int64"]];
};
