"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNativeAriesAskar = void 0;
const ffi_napi_1 = require("@2060.io/ffi-napi");
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const bindings_1 = require("./bindings");
const LIBNAME = 'aries_askar';
const ENV_VAR = 'LIB_ARIES_ASKAR_PATH';
const extensions = {
    darwin: { prefix: 'lib', extension: '.dylib' },
    linux: { prefix: 'lib', extension: '.so' },
    win32: { extension: '.dll' },
};
const libPaths = {
    darwin: ['/usr/local/lib/', '/usr/lib/', '/opt/homebrew/opt/'],
    linux: ['/usr/lib/', '/usr/local/lib/'],
    win32: ['c:\\windows\\system32\\'],
};
// Alias for a simple function to check if the path exists
const doesPathExist = fs_1.default.existsSync;
const getLibrary = () => {
    // Detect OS; darwin, linux and windows are only supported
    const platform = os_1.default.platform();
    if (platform !== 'linux' && platform !== 'win32' && platform !== 'darwin')
        throw new Error(`Unsupported platform: ${platform}. linux, win32 and darwin are supported.`);
    // Get a potential path from the environment variable
    const pathFromEnvironment = process.env[ENV_VAR];
    // Get the paths specific to the users operating system
    const platformPaths = libPaths[platform];
    // Look for the file in the native directory of the package.
    // node-pre-gyp will download the binaries to this directory after installing the package
    platformPaths.unshift(path_1.default.join(__dirname, '../../native'));
    // Check if the path from the environment variable is supplied and add it
    // We use unshift here so that when we want to get a valid library path this will be the first to resolve
    if (pathFromEnvironment)
        platformPaths.unshift(pathFromEnvironment);
    // Create the path + file
    const libaries = platformPaths.map((p) => { var _a; return path_1.default.join(p, `${(_a = extensions[platform].prefix) !== null && _a !== void 0 ? _a : ''}${LIBNAME}${extensions[platform].extension}`); });
    // Gaurd so we quit if there is no valid path for the library
    if (!libaries.some(doesPathExist))
        throw new Error(`Could not find ${LIBNAME} with these paths: ${libaries.join(' ')}`);
    // Get the first valid library
    // Casting here as a string because there is a guard of none of the paths
    const validLibraryPath = libaries.find((l) => doesPathExist(l));
    // TODO fix the typing conversion
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return (0, ffi_napi_1.Library)(validLibraryPath, bindings_1.nativeBindings);
};
let nativeAriesAskar = undefined;
const getNativeAriesAskar = () => {
    if (!nativeAriesAskar)
        nativeAriesAskar = getLibrary();
    return nativeAriesAskar;
};
exports.getNativeAriesAskar = getNativeAriesAskar;
//# sourceMappingURL=register.js.map