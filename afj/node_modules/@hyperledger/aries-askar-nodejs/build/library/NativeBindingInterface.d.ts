import type { nativeBindings } from './bindings';
interface StringTypeMapping {
    pointer: Buffer;
    'char*': Buffer;
    string: string;
    int64: number;
    int32: number;
    int8: number;
    int: number;
    size_t: number;
}
declare type ShapeOf<T> = {
    [Property in keyof T]: T[Property];
};
declare type StringTypeArrayToTypes<List extends Array<keyof StringTypeMapping>> = {
    [Item in keyof List]: List[Item] extends keyof StringTypeMapping ? StringTypeMapping[List[Item]] : Buffer;
};
declare type TypedMethods<Base extends {
    [method: string | number | symbol]: [any, any[]];
}> = {
    [Property in keyof Base]: (...args: StringTypeArrayToTypes<Base[Property][1]> extends any[] ? StringTypeArrayToTypes<Base[Property][1]> : []) => StringTypeMapping[Base[Property][0]];
};
declare type Mutable<T> = {
    -readonly [K in keyof T]: Mutable<T[K]>;
};
export declare type NativeMethods = TypedMethods<ShapeOf<Mutable<typeof nativeBindings>>>;
export {};
