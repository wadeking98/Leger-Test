import type { ByteBufferStruct, SecretBufferStruct } from './structures';
import { Key, ArcHandle, StoreHandle, SessionHandle, ScanHandle, Jwk } from '@hyperledger/aries-askar-shared';
export declare type Callback = (err: number) => void;
export declare type CallbackWithResponse = (err: number, response: string) => void;
declare type Argument = Record<string, unknown> | ArcHandle | StoreHandle | SessionHandle | ScanHandle | Array<unknown> | Date | Uint8Array | SerializedArgument | boolean | Jwk | Key;
declare type SerializedArgument = string | number | Callback | CallbackWithResponse | ArrayBuffer | typeof ByteBufferStruct | typeof SecretBufferStruct | Buffer;
export declare type SerializedOptions<Type> = Required<{
    [Property in keyof Type]: Type[Property] extends string ? string : Type[Property] extends number | boolean | Date | StoreHandle | SessionHandle | ScanHandle ? number : Type[Property] extends Record<string, unknown> | Array<unknown> ? string : Type[Property] extends Buffer | Uint8Array | Key | ArcHandle | Jwk ? Buffer : Type[Property] extends Callback ? Callback : Type[Property] extends CallbackWithResponse ? CallbackWithResponse : Type[Property] extends boolean | undefined ? number : Type[Property] extends Array<unknown> | undefined ? string : Type[Property] extends Record<string, unknown> | undefined ? string : Type[Property] extends Date | undefined ? number : Type[Property] extends string | undefined ? string : Type[Property] extends number | undefined ? number : Type[Property] extends Uint8Array | undefined ? Buffer : unknown;
}>;
declare const serializeArguments: <T extends Record<string, Argument> = Record<string, Argument>>(args: T) => Required<{ [Property in keyof T]: T[Property] extends string ? string : T[Property] extends number | boolean | Date | StoreHandle | ScanHandle | SessionHandle ? number : T[Property] extends unknown[] | Record<string, unknown> ? string : T[Property] extends Uint8Array | Buffer | ArcHandle | Jwk | Key ? Buffer : T[Property] extends Callback ? Callback : T[Property] extends CallbackWithResponse ? CallbackWithResponse : T[Property] extends boolean | undefined ? number : T[Property] extends unknown[] | undefined ? string : T[Property] extends Record<string, unknown> | undefined ? string : T[Property] extends Date | undefined ? number : T[Property] extends string | undefined ? string : T[Property] extends number | undefined ? number : T[Property] extends Uint8Array | undefined ? Buffer : unknown; }>;
export { serializeArguments };
