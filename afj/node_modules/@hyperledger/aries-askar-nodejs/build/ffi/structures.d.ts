import { default as ref } from '@2060.io/ref-napi';
import refArray from 'ref-array-di';
import refStruct from 'ref-struct-di';
export declare const ByteBufferArray: refArray.ArrayType<number>;
export declare const ByteBufferArrayPtr: ref.Type<ref.Pointer<refArray.TypedArray<number, number>>>;
export declare const ByteBufferStruct: refStruct.StructType<{
    len: import("ref-napi").Type<string | number>;
    data: import("ref-napi").Type<ref.Pointer<refArray.TypedArray<number, number>>>;
}>;
export declare const SecretBufferStruct: refStruct.StructType<{
    len: import("ref-napi").Type<string | number>;
    data: import("ref-napi").Type<ref.Pointer<refArray.TypedArray<number, number>>>;
}>;
export declare const SecretBufferStructPtr: ref.Type<ref.Pointer<refStruct.StructObject<{
    len: string | number;
    data: ref.Pointer<refArray.TypedArray<number, number>>;
}>>>;
export declare const EncryptedBufferStruct: refStruct.StructType<{
    secretBuffer: import("ref-napi").Type<refStruct.StructObject<{
        len: string | number;
        data: ref.Pointer<refArray.TypedArray<number, number>>;
    }>>;
    tagPos: import("ref-napi").Type<string | number>;
    noncePos: import("ref-napi").Type<string | number>;
}>;
export declare const EncryptedBufferStructPtr: ref.Type<ref.Pointer<refStruct.StructObject<{
    secretBuffer: refStruct.StructObject<{
        len: string | number;
        data: ref.Pointer<refArray.TypedArray<number, number>>;
    }>;
    tagPos: string | number;
    noncePos: string | number;
}>>>;
export declare const AeadParamsStruct: refStruct.StructType<{
    nonceLength: import("ref-napi").Type<number>;
    tagLength: import("ref-napi").Type<number>;
}>;
export declare const AeadParamsStructPtr: ref.Type<ref.Pointer<refStruct.StructObject<{
    nonceLength: number;
    tagLength: number;
}>>>;
export declare type EncryptedBufferType = {
    secretBuffer: SecretBufferType;
    tagPos: number;
    noncePos: number;
};
export declare type ByteBufferType = {
    data: Buffer;
    len: number;
};
export declare type SecretBufferType = ByteBufferType;
