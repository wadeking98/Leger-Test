"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialRevocationState = void 0;
const AnoncredsObject_1 = require("../AnoncredsObject");
const register_1 = require("../register");
const RevocationRegistryDefinition_1 = require("./RevocationRegistryDefinition");
const RevocationStatusList_1 = require("./RevocationStatusList");
const utils_1 = require("./utils");
class CredentialRevocationState extends AnoncredsObject_1.AnoncredsObject {
    static create(options) {
        let credentialRevocationStateHandle;
        // Objects created within this method must be freed up
        const objectHandles = [];
        try {
            const revocationRegistryDefinition = options.revocationRegistryDefinition instanceof RevocationRegistryDefinition_1.RevocationRegistryDefinition
                ? options.revocationRegistryDefinition.handle
                : (0, utils_1.pushToArray)(RevocationRegistryDefinition_1.RevocationRegistryDefinition.fromJson(options.revocationRegistryDefinition).handle, objectHandles);
            const revocationStatusList = options.revocationStatusList instanceof RevocationStatusList_1.RevocationStatusList
                ? options.revocationStatusList.handle
                : (0, utils_1.pushToArray)(RevocationStatusList_1.RevocationStatusList.fromJson(options.revocationStatusList).handle, objectHandles);
            credentialRevocationStateHandle = register_1.anoncreds.createOrUpdateRevocationState({
                revocationRegistryDefinition,
                revocationStatusList,
                revocationRegistryIndex: options.revocationRegistryIndex,
                tailsPath: options.tailsPath,
                oldRevocationStatusList: undefined,
                oldRevocationState: undefined,
            }).handle;
        }
        finally {
            objectHandles.forEach((handle) => handle.clear());
        }
        return new CredentialRevocationState(credentialRevocationStateHandle);
    }
    static fromJson(json) {
        return new CredentialRevocationState(register_1.anoncreds.revocationStateFromJson({ json: JSON.stringify(json) }).handle);
    }
    update(options) {
        this.handle = register_1.anoncreds.createOrUpdateRevocationState({
            revocationRegistryDefinition: options.revocationRegistryDefinition.handle,
            revocationStatusList: options.revocationStatusList.handle,
            revocationRegistryIndex: options.revocationRegistryIndex,
            tailsPath: options.tailsPath,
            oldRevocationStatusList: options.oldRevocationStatusList.handle,
            oldRevocationState: options.oldRevocationState.handle,
        });
    }
}
exports.CredentialRevocationState = CredentialRevocationState;
//# sourceMappingURL=CredentialRevocationState.js.map