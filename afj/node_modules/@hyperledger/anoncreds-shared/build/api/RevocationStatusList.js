"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RevocationStatusList = void 0;
const AnoncredsObject_1 = require("../AnoncredsObject");
const register_1 = require("../register");
const CredentialDefinition_1 = require("./CredentialDefinition");
const RevocationRegistryDefinition_1 = require("./RevocationRegistryDefinition");
const RevocationRegistryDefinitionPrivate_1 = require("./RevocationRegistryDefinitionPrivate");
const utils_1 = require("./utils");
class RevocationStatusList extends AnoncredsObject_1.AnoncredsObject {
    static create(options) {
        let revocationStatusListHandle;
        const objectHandles = [];
        try {
            const credentialDefinition = options.credentialDefinition instanceof CredentialDefinition_1.CredentialDefinition
                ? options.credentialDefinition.handle
                : (0, utils_1.pushToArray)(CredentialDefinition_1.CredentialDefinition.fromJson(options.credentialDefinition).handle, objectHandles);
            const revocationRegistryDefinition = options.revocationRegistryDefinition instanceof RevocationRegistryDefinition_1.RevocationRegistryDefinition
                ? options.revocationRegistryDefinition.handle
                : (0, utils_1.pushToArray)(RevocationRegistryDefinition_1.RevocationRegistryDefinition.fromJson(options.revocationRegistryDefinition).handle, objectHandles);
            const revocationRegistryDefinitionPrivate = options.revocationRegistryDefinitionPrivate instanceof RevocationRegistryDefinitionPrivate_1.RevocationRegistryDefinitionPrivate
                ? options.revocationRegistryDefinitionPrivate.handle
                : (0, utils_1.pushToArray)(RevocationRegistryDefinitionPrivate_1.RevocationRegistryDefinitionPrivate.fromJson(options.revocationRegistryDefinitionPrivate).handle, objectHandles);
            revocationStatusListHandle = register_1.anoncreds.createRevocationStatusList(Object.assign(Object.assign({}, options), { credentialDefinition,
                revocationRegistryDefinition,
                revocationRegistryDefinitionPrivate })).handle;
        }
        finally {
            objectHandles.forEach((handle) => handle.clear());
        }
        return new RevocationStatusList(revocationStatusListHandle);
    }
    static fromJson(json) {
        return new RevocationStatusList(register_1.anoncreds.revocationStatusListFromJson({ json: JSON.stringify(json) }).handle);
    }
    updateTimestamp(options) {
        const updatedRevocationStatusList = register_1.anoncreds.updateRevocationStatusListTimestampOnly({
            timestamp: options.timestamp,
            currentRevocationStatusList: this.handle,
        });
        this.handle = updatedRevocationStatusList;
    }
    update(options) {
        const objectHandles = [];
        try {
            const credentialDefinition = options.credentialDefinition instanceof CredentialDefinition_1.CredentialDefinition
                ? options.credentialDefinition.handle
                : (0, utils_1.pushToArray)(CredentialDefinition_1.CredentialDefinition.fromJson(options.credentialDefinition).handle, objectHandles);
            const revocationRegistryDefinition = options.revocationRegistryDefinition instanceof RevocationRegistryDefinition_1.RevocationRegistryDefinition
                ? options.revocationRegistryDefinition.handle
                : (0, utils_1.pushToArray)(RevocationRegistryDefinition_1.RevocationRegistryDefinition.fromJson(options.revocationRegistryDefinition).handle, objectHandles);
            const revocationRegistryDefinitionPrivate = options.revocationRegistryDefinitionPrivate instanceof RevocationRegistryDefinitionPrivate_1.RevocationRegistryDefinitionPrivate
                ? options.revocationRegistryDefinitionPrivate.handle
                : (0, utils_1.pushToArray)(RevocationRegistryDefinitionPrivate_1.RevocationRegistryDefinitionPrivate.fromJson(options.revocationRegistryDefinitionPrivate).handle, objectHandles);
            const updatedRevocationStatusList = register_1.anoncreds.updateRevocationStatusList(Object.assign(Object.assign({}, options), { credentialDefinition,
                revocationRegistryDefinition,
                revocationRegistryDefinitionPrivate, currentRevocationStatusList: this.handle }));
            this.handle = updatedRevocationStatusList;
        }
        finally {
            objectHandles.forEach((handle) => handle.clear());
        }
    }
}
exports.RevocationStatusList = RevocationStatusList;
//# sourceMappingURL=RevocationStatusList.js.map