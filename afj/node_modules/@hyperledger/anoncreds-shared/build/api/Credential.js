"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Credential = void 0;
const AnoncredsObject_1 = require("../AnoncredsObject");
const register_1 = require("../register");
const CredentialDefinition_1 = require("./CredentialDefinition");
const CredentialDefinitionPrivate_1 = require("./CredentialDefinitionPrivate");
const CredentialOffer_1 = require("./CredentialOffer");
const CredentialRequest_1 = require("./CredentialRequest");
const CredentialRequestMetadata_1 = require("./CredentialRequestMetadata");
const RevocationRegistryDefinition_1 = require("./RevocationRegistryDefinition");
const utils_1 = require("./utils");
class Credential extends AnoncredsObject_1.AnoncredsObject {
    static create(options) {
        var _a;
        let credential;
        // Objects created within this method must be freed up
        const objectHandles = [];
        try {
            const credentialDefinition = options.credentialDefinition instanceof CredentialDefinition_1.CredentialDefinition
                ? options.credentialDefinition.handle
                : (0, utils_1.pushToArray)(CredentialDefinition_1.CredentialDefinition.fromJson(options.credentialDefinition).handle, objectHandles);
            const credentialDefinitionPrivate = options.credentialDefinitionPrivate instanceof CredentialDefinitionPrivate_1.CredentialDefinitionPrivate
                ? options.credentialDefinitionPrivate.handle
                : (0, utils_1.pushToArray)(CredentialDefinitionPrivate_1.CredentialDefinitionPrivate.fromJson(options.credentialDefinitionPrivate).handle, objectHandles);
            const credentialOffer = options.credentialOffer instanceof CredentialOffer_1.CredentialOffer
                ? options.credentialOffer.handle
                : (0, utils_1.pushToArray)(CredentialOffer_1.CredentialOffer.fromJson(options.credentialOffer).handle, objectHandles);
            const credentialRequest = options.credentialRequest instanceof CredentialRequest_1.CredentialRequest
                ? options.credentialRequest.handle
                : (0, utils_1.pushToArray)(CredentialRequest_1.CredentialRequest.fromJson(options.credentialRequest).handle, objectHandles);
            credential = register_1.anoncreds.createCredential({
                credentialDefinition,
                credentialDefinitionPrivate,
                credentialOffer,
                credentialRequest,
                attributeRawValues: options.attributeRawValues,
                attributeEncodedValues: options.attributeEncodedValues,
                revocationConfiguration: (_a = options.revocationConfiguration) === null || _a === void 0 ? void 0 : _a.native,
            });
        }
        finally {
            objectHandles.forEach((handle) => handle.clear());
        }
        return new Credential(credential.handle);
    }
    static fromJson(json) {
        return new Credential(register_1.anoncreds.credentialFromJson({ json: JSON.stringify(json) }).handle);
    }
    process(options) {
        let credential;
        // Objects created within this method must be freed up
        const objectHandles = [];
        try {
            const credentialDefinition = options.credentialDefinition instanceof CredentialDefinition_1.CredentialDefinition
                ? options.credentialDefinition.handle
                : (0, utils_1.pushToArray)(CredentialDefinition_1.CredentialDefinition.fromJson(options.credentialDefinition).handle, objectHandles);
            const credentialRequestMetadata = options.credentialRequestMetadata instanceof CredentialRequestMetadata_1.CredentialRequestMetadata
                ? options.credentialRequestMetadata.handle
                : (0, utils_1.pushToArray)(CredentialRequestMetadata_1.CredentialRequestMetadata.fromJson(options.credentialRequestMetadata).handle, objectHandles);
            const revocationRegistryDefinition = options.revocationRegistryDefinition instanceof RevocationRegistryDefinition_1.RevocationRegistryDefinition
                ? options.revocationRegistryDefinition.handle
                : options.revocationRegistryDefinition !== undefined
                    ? (0, utils_1.pushToArray)(RevocationRegistryDefinition_1.RevocationRegistryDefinition.fromJson(options.revocationRegistryDefinition).handle, objectHandles)
                    : undefined;
            credential = register_1.anoncreds.processCredential({
                credential: this.handle,
                credentialDefinition,
                credentialRequestMetadata,
                linkSecret: options.linkSecret,
                revocationRegistryDefinition,
            });
            // We can discard previous handle and store the new one
            this.handle.clear();
            this.handle = credential;
        }
        finally {
            objectHandles.forEach((handle) => handle.clear());
        }
        return this;
    }
    get schemaId() {
        return register_1.anoncreds.credentialGetAttribute({ objectHandle: this.handle, name: 'schema_id' });
    }
    get credentialDefinitionId() {
        return register_1.anoncreds.credentialGetAttribute({ objectHandle: this.handle, name: 'cred_def_id' });
    }
    get revocationRegistryId() {
        return register_1.anoncreds.credentialGetAttribute({ objectHandle: this.handle, name: 'rev_reg_id' });
    }
    get revocationRegistryIndex() {
        const index = register_1.anoncreds.credentialGetAttribute({ objectHandle: this.handle, name: 'rev_reg_index' });
        return index ? Number(index) : undefined;
    }
}
exports.Credential = Credential;
//# sourceMappingURL=Credential.js.map