"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialRequest = void 0;
const AnoncredsObject_1 = require("../AnoncredsObject");
const register_1 = require("../register");
const CredentialDefinition_1 = require("./CredentialDefinition");
const CredentialOffer_1 = require("./CredentialOffer");
const CredentialRequestMetadata_1 = require("./CredentialRequestMetadata");
const utils_1 = require("./utils");
class CredentialRequest extends AnoncredsObject_1.AnoncredsObject {
    static create(options) {
        let createReturnObj;
        // Objects created within this method must be freed up
        const objectHandles = [];
        try {
            const credentialDefinition = options.credentialDefinition instanceof CredentialDefinition_1.CredentialDefinition
                ? options.credentialDefinition.handle
                : (0, utils_1.pushToArray)(CredentialDefinition_1.CredentialDefinition.fromJson(options.credentialDefinition).handle, objectHandles);
            const credentialOffer = options.credentialOffer instanceof CredentialOffer_1.CredentialOffer
                ? options.credentialOffer.handle
                : (0, utils_1.pushToArray)(CredentialOffer_1.CredentialOffer.fromJson(options.credentialOffer).handle, objectHandles);
            createReturnObj = register_1.anoncreds.createCredentialRequest({
                entropy: options.entropy,
                proverDid: options.proverDid,
                credentialDefinition,
                linkSecret: options.linkSecret,
                linkSecretId: options.linkSecretId,
                credentialOffer,
            });
        }
        finally {
            objectHandles.forEach((handle) => handle.clear());
        }
        return {
            credentialRequest: new CredentialRequest(createReturnObj.credentialRequest.handle),
            credentialRequestMetadata: new CredentialRequestMetadata_1.CredentialRequestMetadata(createReturnObj.credentialRequestMetadata.handle),
        };
    }
    static fromJson(json) {
        return new CredentialRequest(register_1.anoncreds.credentialRequestFromJson({ json: JSON.stringify(json) }).handle);
    }
}
exports.CredentialRequest = CredentialRequest;
//# sourceMappingURL=CredentialRequest.js.map