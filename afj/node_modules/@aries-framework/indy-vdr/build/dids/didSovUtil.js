"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addServicesFromEndpointsAttrib = exports.endpointsAttribFromServices = exports.sovDidDocumentFromDid = exports.getFullVerkey = exports.isFullVerkey = exports.FULL_VERKEY_REGEX = void 0;
const core_1 = require("@aries-framework/core");
exports.FULL_VERKEY_REGEX = /^[1-9A-HJ-NP-Za-km-z]{43,44}$/;
/**
 * Check a base58 encoded string against a regex expression to determine if it is a full valid verkey
 * @param verkey Base58 encoded string representation of a verkey
 * @return Boolean indicating if the string is a valid verkey
 */
function isFullVerkey(verkey) {
    return exports.FULL_VERKEY_REGEX.test(verkey);
}
exports.isFullVerkey = isFullVerkey;
function getFullVerkey(did, verkey) {
    var _a;
    if (isFullVerkey(verkey))
        return verkey;
    // Did could have did:xxx prefix, only take the last item after :
    const id = (_a = did.split(':').pop()) !== null && _a !== void 0 ? _a : did;
    // Verkey is prefixed with ~ if abbreviated
    const verkeyWithoutTilde = verkey.slice(1);
    // Create base58 encoded public key (32 bytes)
    return core_1.TypedArrayEncoder.toBase58(Buffer.concat([
        // Take did identifier (16 bytes)
        core_1.TypedArrayEncoder.fromBase58(id),
        // Concat the abbreviated verkey (16 bytes)
        core_1.TypedArrayEncoder.fromBase58(verkeyWithoutTilde),
    ]));
}
exports.getFullVerkey = getFullVerkey;
function sovDidDocumentFromDid(fullDid, verkey) {
    const verificationMethodId = `${fullDid}#key-1`;
    const keyAgreementId = `${fullDid}#key-agreement-1`;
    const publicKeyBase58 = getFullVerkey(fullDid, verkey);
    const publicKeyX25519 = core_1.TypedArrayEncoder.toBase58((0, core_1.convertPublicKeyToX25519)(core_1.TypedArrayEncoder.fromBase58(publicKeyBase58)));
    const builder = new core_1.DidDocumentBuilder(fullDid)
        .addContext('https://w3id.org/security/suites/ed25519-2018/v1')
        .addContext('https://w3id.org/security/suites/x25519-2019/v1')
        .addVerificationMethod({
        controller: fullDid,
        id: verificationMethodId,
        publicKeyBase58: publicKeyBase58,
        type: 'Ed25519VerificationKey2018',
    })
        .addVerificationMethod({
        controller: fullDid,
        id: keyAgreementId,
        publicKeyBase58: publicKeyX25519,
        type: 'X25519KeyAgreementKey2019',
    })
        .addAuthentication(verificationMethodId)
        .addAssertionMethod(verificationMethodId)
        .addKeyAgreement(keyAgreementId);
    return builder;
}
exports.sovDidDocumentFromDid = sovDidDocumentFromDid;
// Process Indy Attrib Endpoint Types according to: https://sovrin-foundation.github.io/sovrin/spec/did-method-spec-template.html > Read (Resolve) > DID Service Endpoint
function processEndpointTypes(types) {
    const expectedTypes = ['endpoint', 'did-communication', 'DIDComm'];
    const defaultTypes = ['endpoint', 'did-communication'];
    // Return default types if types "is NOT present [or] empty"
    if (!types || types.length <= 0) {
        return defaultTypes;
    }
    // Return default types if types "contain any other values"
    for (const type of types) {
        if (!expectedTypes.includes(type)) {
            return defaultTypes;
        }
    }
    // Return provided types
    return types;
}
function endpointsAttribFromServices(services) {
    const commTypes = ['endpoint', 'did-communication', 'DIDComm'];
    const commServices = services.filter((item) => commTypes.includes(item.type));
    // Check that all services use the same endpoint, as only one is accepted
    if (!commServices.every((item) => item.serviceEndpoint === services[0].serviceEndpoint)) {
        throw new core_1.AriesFrameworkError('serviceEndpoint for all services must match');
    }
    const types = [];
    const routingKeys = new Set();
    for (const commService of commServices) {
        const commServiceType = commService.type;
        if (types.includes(commServiceType)) {
            throw new core_1.AriesFrameworkError('Only a single communication service per type is supported');
        }
        types.push(commServiceType);
        if ((commService instanceof core_1.DidCommV1Service || commService instanceof core_1.DidCommV2Service) &&
            commService.routingKeys) {
            commService.routingKeys.forEach((item) => routingKeys.add(item));
        }
    }
    return { endpoint: services[0].serviceEndpoint, types, routingKeys: Array.from(routingKeys) };
}
exports.endpointsAttribFromServices = endpointsAttribFromServices;
function addServicesFromEndpointsAttrib(builder, did, endpoints, keyAgreementId) {
    const { endpoint, routingKeys, types } = endpoints, otherEndpoints = __rest(endpoints, ["endpoint", "routingKeys", "types"]);
    if (endpoint) {
        const processedTypes = processEndpointTypes(types);
        // If 'endpoint' included in types, add id to the services array
        if (processedTypes.includes('endpoint')) {
            builder.addService(new core_1.DidDocumentService({
                id: `${did}#endpoint`,
                serviceEndpoint: endpoint,
                type: 'endpoint',
            }));
        }
        // If 'did-communication' included in types, add DIDComm v1 entry
        if (processedTypes.includes('did-communication')) {
            builder.addService(new core_1.DidCommV1Service({
                id: `${did}#did-communication`,
                serviceEndpoint: endpoint,
                priority: 0,
                routingKeys: routingKeys !== null && routingKeys !== void 0 ? routingKeys : [],
                recipientKeys: [keyAgreementId],
                accept: ['didcomm/aip2;env=rfc19'],
            }));
            // If 'DIDComm' included in types, add DIDComm v2 entry
            // TODO: should it be DIDComm or DIDCommMessaging? (see https://github.com/sovrin-foundation/sovrin/issues/343)
            if (processedTypes.includes('DIDComm')) {
                builder
                    .addService(new core_1.DidCommV2Service({
                    id: `${did}#didcomm-1`,
                    serviceEndpoint: endpoint,
                    routingKeys: routingKeys !== null && routingKeys !== void 0 ? routingKeys : [],
                    accept: ['didcomm/v2'],
                }))
                    .addContext('https://didcomm.org/messaging/contexts/v2');
            }
        }
    }
    // Add other endpoint types
    for (const [type, endpoint] of Object.entries(otherEndpoints)) {
        builder.addService(new core_1.DidDocumentService({
            id: `${did}#${type}`,
            serviceEndpoint: endpoint,
            type,
        }));
    }
}
exports.addServicesFromEndpointsAttrib = addServicesFromEndpointsAttrib;
//# sourceMappingURL=didSovUtil.js.map