import 'reflect-metadata';
export { MessageReceiver } from './agent/MessageReceiver';
export { Agent } from './agent/Agent';
export { BaseAgent } from './agent/BaseAgent';
export * from './agent';
export type { ModulesMap, DefaultAgentModules, EmptyModuleMap } from './agent/AgentModules';
export { EventEmitter } from './agent/EventEmitter';
export { FeatureRegistry } from './agent/FeatureRegistry';
export { MessageHandler, MessageHandlerInboundMessage } from './agent/MessageHandler';
export { MessageHandlerRegistry } from './agent/MessageHandlerRegistry';
export * from './agent/models';
export { AgentConfig } from './agent/AgentConfig';
export { AgentMessage } from './agent/AgentMessage';
export { Dispatcher } from './agent/Dispatcher';
export { MessageSender } from './agent/MessageSender';
export type { AgentDependencies } from './agent/AgentDependencies';
export { getOutboundMessageContext } from './agent/getOutboundMessageContext';
export type { InitConfig, OutboundPackage, EncryptedMessage, WalletConfig, JsonArray, JsonObject, JsonValue, WalletConfigRekey, WalletExportImportConfig, WalletStorageConfig, } from './types';
export { DidCommMimeType, KeyDerivationMethod } from './types';
export type { FileSystem, DownloadToFileOptions } from './storage/FileSystem';
export * from './storage/BaseRecord';
export { DidCommMessageRecord, DidCommMessageRole, DidCommMessageRepository } from './storage/didcomm';
export { InMemoryMessageRepository } from './storage/InMemoryMessageRepository';
export { Repository } from './storage/Repository';
export * from './storage/RepositoryEvents';
export { StorageService, Query, SimpleQuery, BaseRecordConstructor } from './storage/StorageService';
export * from './storage/migration';
export { getDirFromFilePath } from './utils/path';
export { InjectionSymbols } from './constants';
export * from './wallet';
export type { TransportSession } from './agent/TransportService';
export { TransportService } from './agent/TransportService';
export { Attachment, AttachmentData } from './decorators/attachment/Attachment';
export { ServiceDecorator, ServiceDecoratorOptions } from './decorators/service/ServiceDecorator';
export { ReturnRouteTypes } from './decorators/transport/TransportDecorator';
export * from './plugins';
export * from './transport';
export * from './modules/basic-messages';
export * from './modules/common';
export * from './modules/credentials';
export * from './modules/discover-features';
export * from './modules/problem-reports';
export * from './modules/proofs';
export * from './modules/connections';
export * from './modules/routing';
export * from './modules/oob';
export * from './modules/dids';
export * from './modules/vc';
export * from './modules/cache';
export { JsonEncoder, JsonTransformer, isJsonObject, isValidJweStructure, TypedArrayEncoder, Buffer } from './utils';
export * from './logger';
export * from './error';
export * from './wallet/error';
export { parseMessageType, IsValidMessageType, replaceLegacyDidSovPrefix } from './utils/messageType';
export type { Constructor } from './utils/mixins';
export * from './agent/Events';
export * from './crypto/';
export { encodeAttachment, isLinkedAttachment } from './utils/attachment';
export { Hasher } from './utils/Hasher';
export { MessageValidator } from './utils/MessageValidator';
export { LinkedAttachment, LinkedAttachmentOptions } from './utils/LinkedAttachment';
import { uuid, isValidUuid } from './utils/uuid';
declare const utils: {
    uuid: typeof uuid;
    isValidUuid: typeof isValidUuid;
    parseInvitationUrl: (invitationUrl: string) => import("./modules/oob").OutOfBandInvitation;
};
export { utils };
