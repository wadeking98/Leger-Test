"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnonCredsRsVerifierService = void 0;
const core_1 = require("@aries-framework/core");
const anoncreds_shared_1 = require("@hyperledger/anoncreds-shared");
let AnonCredsRsVerifierService = class AnonCredsRsVerifierService {
    async verifyProof(agentContext, options) {
        const { credentialDefinitions, proof, proofRequest, revocationRegistries, schemas } = options;
        let presentation;
        try {
            presentation = anoncreds_shared_1.Presentation.fromJson(proof);
            const rsCredentialDefinitions = {};
            for (const credDefId in credentialDefinitions) {
                rsCredentialDefinitions[credDefId] = credentialDefinitions[credDefId];
            }
            const rsSchemas = {};
            for (const schemaId in schemas) {
                rsSchemas[schemaId] = schemas[schemaId];
            }
            const revocationRegistryDefinitions = {};
            const lists = [];
            for (const revocationRegistryDefinitionId in revocationRegistries) {
                const { definition, revocationStatusLists } = options.revocationRegistries[revocationRegistryDefinitionId];
                revocationRegistryDefinitions[revocationRegistryDefinitionId] = definition;
                lists.push(...Object.values(revocationStatusLists));
            }
            return presentation.verify({
                presentationRequest: proofRequest,
                credentialDefinitions: rsCredentialDefinitions,
                schemas: rsSchemas,
                revocationRegistryDefinitions,
                revocationStatusLists: lists,
            });
        }
        finally {
            presentation === null || presentation === void 0 ? void 0 : presentation.handle.clear();
        }
    }
};
AnonCredsRsVerifierService = __decorate([
    (0, core_1.injectable)()
], AnonCredsRsVerifierService);
exports.AnonCredsRsVerifierService = AnonCredsRsVerifierService;
//# sourceMappingURL=AnonCredsRsVerifierService.js.map